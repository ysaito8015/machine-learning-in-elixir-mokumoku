# ch02. Get Comfortable with Nx

## Section

```elixir
Mix.install([
  {:nx, "~>0.5"},
  {:exla, "~>0.5"},
  {:benchee, github: "bencheeorg/benchee", override: true}
])
```

```elixir
Nx.tensor([1, 2, 3])
```

```elixir
a = Nx.tensor([[1, 2, 3], [4, 5, 6]])
b = Nx.tensor(1.0)
c = Nx.tensor([[[[[[1.0, 2]]]]]])

dbg(a)
dbg(b)
dbg(c)
```

```elixir
a = Nx.tensor([1, 2, 3])
b = Nx.tensor([1.0, 2.0, 3.0])
dbg(a)
dbg(b)
```

```elixir
Nx.tensor(0.0000000000000000000000000000000000000000000001)
```

```elixir
Nx.tensor(1.0e-45)
```

```elixir
Nx.tensor(1.0e-46, type: {:f, 64})
```

```elixir
Nx.tensor(128, type: {:s, 8})
```

```elixir
Nx.tensor([1.0, 2, 3])
```

```elixir
a = Nx.tensor([1, 2])
b = Nx.tensor([[1, 2], [3, 4]])
c = Nx.tensor([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])
```

```elixir
dbg(a)
dbg(b)
dbg(c)
```

```elixir
Nx.tensor(10)
```

```elixir
Nx.tensor([[1,2,3], [4,5,6]], names: [:x, :y])
```

```elixir
a = Nx.tensor([[1,2,3], [4,5,6]])

Nx.to_binary(a)
```

```elixir
<<1::64-signed-native, 2::64-signed-native, 3::64-signed-native>>
|> Nx.from_binary({:s, 64})
```

```elixir
<<1::64-signed-native, 2::64-signed-native, 3::64-signed-native>>
|> Nx.from_binary({:s, 64})
|> Nx.reshape({1,3})
```

#### 2.2 Using Nx Operations

1. shape and type operations
2. element-wise unary operations
3. element-wise binary operations
4. reductions

<!-- livebook:{"break_markdown":true} -->

##### 1. Shape and Type Operations

```elixir
a = Nx.tensor([1,2,3])
```

```elixir
a
|> Nx.as_type({:f, 32})
|> Nx.reshape({1,3,1})
```

```elixir
a
```

```elixir
dbg(Nx.bitcast(a, {:f, 64}))

dbg(a)
```

```elixir
a
```

##### 2. Element-wise Unary Operations

<!-- livebook:{"break_markdown":true} -->

####

```elixir
a = [-1,-2,-3,0,1,2,3]
Enum.map(a, &abs/1)
```

```elixir
a = Nx.tensor(
  [
    [
      [-1,-2,-3],
      [-4,-5,-6]
    ],
    [
      [1,2,3],
      [4,5,6]
    ]
  ]
)
```

```elixir
Nx.abs(a)
```

##### 3. Element-wise Binary Operations

```elixir
a = [1,2,3]
b = [4,5,6]
Enum.zip_with(a, b, fn x,y -> x + y end)
```

```elixir
a = Nx.tensor(
  [
    [1,2,3],
    [4,5,6]
  ]
)

b = Nx.tensor(
  [
    [6,7,8],
    [9,10,11]
  ]
)
```

```elixir
Nx.add(a, b)
```

```elixir
Nx.multiply(a, b)
```

```elixir
(Nx.iota({1,2}))
```

```
Nx.shape({1,3,3,2})
```

1 行 3 列 3 ページ 4次元が 2 項

```elixir
Nx.shape({1,3,3,2})
```

```elixir
Nx.iota({1,3,3,2})
```

```elixir
Nx.iota({2,3,3} ) #, names: [:x, :y])
```

```
Nx.iota({4,1,3,2})
```

3 行 2 列のスカラーが、4次元分ある

```elixir
Nx.iota({4,1,3,2})
```

```
a = Nx.iota({1,3,3,2})
b = Nx.iota({4,1,3,2})

Nx.add(a, b)
```

```elixir
a = Nx.iota({1,3,3,2})
b = Nx.iota({4,1,3,2})

Nx.add(a, b)
```

```elixir
a = Nx.tensor([[1,2,3],[4,5,6]], names: [:x, :y])
```

```elixir
Nx.sum(a, axes: [:y])
```

```elixir
Nx.add(5, Nx.tensor([1,2,3]))
```

```elixir
Nx.add(Nx.tensor([1,2,3]), Nx.tensor([[4,5,6], [7,8,9]]))
```

##### Reductions

```elixir
revs = Nx.tensor([85,76,42,34,46,23,52,99,22,32,85,51])
```

```elixir
Nx.sum(revs)
```

```elixir
revs = Nx.tensor(
[
    [21, 64, 86, 26, 74, 81, 38, 79, 70, 48, 85, 33],
    [64, 82, 48, 39, 70, 71, 81, 53, 50, 67, 36, 50],
    [68, 74, 39, 78, 95, 62, 53, 21, 43, 59, 51, 88],
    [47, 74, 97, 51, 98, 47, 61, 36, 83, 55, 74, 43]
], names: [:year, :month])
```

```elixir
Nx.sum(revs, axes: [:year])
```

```elixir
Nx.sum(revs, axes: [:month])
```

#### 2.3 Representing the World

1. Tablar Data
2. Images
3. Video
4. Audio
5. Text

<!-- livebook:{"break_markdown":true} -->

#### 2.4 Going from def to defn

```elixir
defmodule MyModule do
  def adds_one(x) do
    Nx.add(x, 1)
  end
end
```

```elixir
defmodule MyModule2 do
  import Nx.Defn
  defn adds_one(x) do
    Nx.add(x, 1)
  end
end
```

```elixir
defmodule MyModule3 do
  import Nx.Defn
  defn adds_one(x) do
    Nx.add(x, 1) |> print_expr()
  end
end
```

```elixir
MyModule3.adds_one(Nx.tensor([1,2,3]))
```

```elixir
MyModule.adds_one(Nx.tensor([1,2,3]))
```

$$
\mathrm{softmax(n)} = \frac{\exp(n)}{\sum{\exp(n)}}
$$

```elixir
defmodule Softmax do
  import Nx.Defn
  defn softmax(n) do
    Nx.exp(n) / Nx.sum(Nx.exp(n))
  end
end
```

```elixir
key = Nx.Random.key(42)
{tensor, _key} = Nx.Random.uniform(key, shape: {1_000_000})

Benchee.run(
  %{
  "JIT with EXLA" => fn ->
    apply(EXLA.jit(&Softmax.softmax/1), [tensor])
    end,
  "Regular Elixir" => fn ->
    Softmax.softmax(tensor)
  end
  },
  time: 10
)
```

```elixir
Nx.Defn.global_default_options(compiler: EXLA)
```

####

```elixir
Nx.default_backend(EXLA.Backend)
```
