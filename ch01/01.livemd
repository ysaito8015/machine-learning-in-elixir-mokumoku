# Ch01 Make Machines That Learn

## Section

```elixir
Mix.install([
  {:axon, "~>0.5"},
  {:nx, "~> 0.5"},
  {:explorer, "~> 0.5"},
  {:kino, "~> 0.5"}
])
```

```elixir
require Explorer.DataFrame, as: DF
```

```elixir
iris = Explorer.Datasets.iris()
```

```elixir
cols = ~w(sepal_width sepal_length petal_length petal_width)
```

```elixir
normalized_iris =
  DF.mutate(
    iris,
    for col <- across(^cols) do
      {col.name, (col - mean(col)) / variance(col)}
    end
  )
```

```elixir
DF.mutate(iris,
  sepal_width: (sepal_width - mean(sepal_width)) / variance(sepal_width),
  sepal_length: (sepal_length - mean(sepal_length)) / variance(sepal_length),
  petal_length: (petal_length - mean(petal_length)) / variance(petal_length),
  petal_width: (petal_width - mean(petal_width)) / variance(petal_width)
)
```

```elixir
# cast the species column to a categorical variable.
normalized_iris =
  DF.mutate(
    normalized_iris,
    species: Explorer.Series.cast(species, :category)
  )
```

```elixir
# Shuffle the data
shuffled_normalized_iris =
  DF.shuffle(normalized_iris)
```

```elixir
train_df =
  DF.slice(shuffled_normalized_iris, 0..119)

test_df =
  DF.slice(shuffled_normalized_iris, 120..149)
```

```elixir
feature_columns = [
  "sepal_length",
  "sepal_width",
  "petal_length",
  "petal_width"
]
```

```elixir
x_train =
  Nx.stack(train_df[feature_columns], axis: -1)
```

```elixir
y_train =
  train_df["species"]
  |> Nx.stack(axis: -1)
  |> Nx.equal(Nx.iota({1, 3}, axis: -1))
```

```elixir
x_test =
  Nx.stack(test_df[feature_columns], axis: -1)

y_test =
  test_df["species"]
  |> Nx.stack(axis: -1)
  |> Nx.equal(Nx.iota({1, 3}, axis: -1))
```

```elixir
model =
  Axon.input(
    "iris_features",
    shape: {nil, 4}
  )
  |> Axon.dense(3, activation: :softmax)
```

```elixir
Axon.Display.as_graph(
  model,
  Nx.template({1, 4}, :f32)
)
```

```elixir
data_stream =
  Stream.repeatedly(fn -> {x_train, y_train} end)
```

```elixir
trained_model_state =
  model
  |> Axon.Loop.trainer(:categorical_cross_entropy, :sgd)
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.run(data_stream, %{}, iterations: 500, epochs: 10)
```

```elixir
data = [{x_test, y_test}]

model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(data, trained_model_state)
```
